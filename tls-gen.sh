#!/bin/bash

SERVER_CERT=${SERVER_CERT:-"registry-server.crt"}
SERVER_KEY=${SERVER_KEY:-"registry-server.key"}

OUTPUT_DIR=ca

if ! which cfssl > /dev/null; then
    echo "cfssl needs to be installed"
    exit 1
fi

if ! which cfssljson > /dev/null; then
    echo "cfssljson needs to be installed"
    exit 1
fi

if ! which jq > /dev/null; then
    echo "jq needs to be installed"
    exit 1
fi

rm -rf $OUTPUT_DIR/config
mkdir -p $OUTPUT_DIR/config
rm -rf $OUTPUT_DIR/certs/tmp
mkdir -p $OUTPUT_DIR/certs/tmp

# Generate ca-config.json and ca-csr.json
cfssl print-defaults config | \
  jq 'del(.signing.profiles) |
      .signing.default.expiry="8760h" |
      .signing.default.usages=["signing", "key encipherment", "server auth"] |
      .key = {"algo":"rsa","size":2048}' \
  > $OUTPUT_DIR/config/ca-config.json
cfssl print-defaults csr | \
  jq 'del(.hosts) |
      .CN = "Autogenerated CA" |
      .names[0].O="Autogen CA for Docker Registry" |
      .names[0].ST="WI" |
      .names[0].L="Madison" |
      .key = {"algo":"rsa","size":2048}' \
  > $OUTPUT_DIR/config/ca-csr.json

HOSTS="\"localhost\", \"127.0.0.1\""
for i in $(echo ${SAN_HOSTS} | sed "s/,/ /g")
do
    HOSTS="\"$i\",${HOSTS}"
done
echo "SAN HOSTS: ${HOSTS}"

# Generate registry-server-csr.json with the SANs according to the namespace
cfssl print-defaults csr | \
  jq ".hosts = [$HOSTS]" | \
  jq '.CN = "registry-server" |
      .names[0].ST="WI" |
      .names[0].L="Madison" |
      .key = {"algo":"rsa","size":2048}' \
  > $OUTPUT_DIR/config/registry-csr.json

# Generate ca cert and key
cfssl gencert -initca $OUTPUT_DIR/config/ca-csr.json | cfssljson -bare $OUTPUT_DIR/certs/tmp/ca

# Generate server cert and key
cfssl gencert \
    -ca $OUTPUT_DIR/certs/tmp/ca.pem \
    -ca-key $OUTPUT_DIR/certs/tmp/ca-key.pem \
    -config $OUTPUT_DIR/config/ca-config.json \
    $OUTPUT_DIR/config/registry-csr.json | cfssljson -bare $OUTPUT_DIR/certs/tmp/server

# Move certs into place
mv $OUTPUT_DIR/certs/tmp/ca.pem $OUTPUT_DIR/certs/registry-client-ca.crt
mv $OUTPUT_DIR/certs/tmp/server.pem $OUTPUT_DIR/certs/${SERVER_CERT}
mv $OUTPUT_DIR/certs/tmp/server-key.pem $OUTPUT_DIR/certs/${SERVER_KEY}
